/*
 * This Java source file was generated by the Gradle 'init' task.
 */

 package basiclibrary;

import java.util.*;

public class Library {

    // Rolling Dice

    public static void main(String[] args) {

        System.out.println(Arrays.toString(roll(5)));
    }

    public static int[] roll(int num) {

        int[] numberShowsInArray = new int[num];

        Random rand = new Random();
        for (int i = 0; i < num; i++) {
            rand.nextInt(6);
            numberShowsInArray[i] = (rand.nextInt(6) + 1);
        }
        return numberShowsInArray;


    }


// containsDuplicates

    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 1; j < arr.length; j++) {
                if (arr[i] == arr[j] && i != j)
                    return true;
            }
        }
        return false;
    }


//Calculating Averages

    public static double calculateAverage(int[] array){

        double sum = 0;
        for(int i = 0; i < array.length; i++){
            sum = sum + array[i];
        }
        double result = sum / array.length;
        return result;
    }


//Arrays of Arrays
public static int mulArrays(int[][] arr) {
    int lowestAvg = 100;
    for (int i = 0; i < arr.length; i++) {
        int total = 0;
        int avg;
        for (int k = 0; k <arr[i].length; k++) {
            total = total + arr[i][k];
        }
        avg = total/(arr[i].length);
        if (avg < lowestAvg) {
            lowestAvg = avg;
        }
    }
    return lowestAvg;
}


//Analyzing Weather Data

    public static String analyzeWeatherData(int[][] weatherArr){
        int low = weatherArr[0][0];
        int high = weatherArr[0][0];

        HashSet<Integer> weather =new HashSet<>();
        StringBuilder result = new StringBuilder();

        for (int i=0; i<weatherArr.length;i++){
            for (int k=0; k<weatherArr[i].length;k++){
                if (weatherArr[i][k]<low){
                    low=weatherArr[i][k];
                }

                if(weatherArr[i][k]>high){
                    high=weatherArr[i][k];
                }
                weather.add(weatherArr[i][k]);
            }

        }

        for (int i=low+1;i<high;i++){
            if (!weather.contains(i)){
                result.append("Never saw ").append(i).append(" " );

            }
        }

        return result.toString();




    }

    //Tallying Election

    public static String tallyElection(List<String> votes){
        HashMap<String, Integer> election= new HashMap<>();
        int voteTotal=0;
        String winner= "";

        for (String vote:votes){
            if (election.containsKey(vote)){
                election.put(vote, election.get(vote)+1);
            }else{
                election.put(vote,1);
            }
        }

        for (String key : election.keySet()){
            if (voteTotal<election.get(key)){
                voteTotal=election.get(key);
                winner=key;
            }
        }

        System.out.println(winner + " received the most votes!");
        return winner;

    }







}





